
;; Function isSubsetSum (_Z11isSubsetSumPiii, funcdef_no=12, decl_uid=2845, cgraph_uid=13, symbol_order=12)

Merging blocks 30 and 31
Merging blocks 30 and 32
;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
;;
;; Loop 4
;;  header 29, latch 28
;;  depth 1, outer 0
;;  nodes: 29 28 27 26 23 25 24
;;
;; Loop 5
;;  header 26, latch 25
;;  depth 2, outer 4
;;  nodes: 26 25 24
;;
;; Loop 3
;;  header 21, latch 20
;;  depth 1, outer 0
;;  nodes: 21 20 19 9 18 12 17 15 16 14 13 10 11
;;
;; Loop 6
;;  header 19, latch 18
;;  depth 2, outer 3
;;  nodes: 19 18 12 17 15 16 14 13 10 11
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 21 }
;; 9 succs { 19 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 18 }
;; 13 succs { 15 14 }
;; 14 succs { 15 16 }
;; 15 succs { 17 }
;; 16 succs { 17 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 10 20 }
;; 20 succs { 21 }
;; 21 succs { 9 22 }
;; 22 succs { 29 }
;; 23 succs { 26 }
;; 24 succs { 31 25 }
;; 25 succs { 26 }
;; 26 succs { 24 27 }
;; 27 succs { 31 28 }
;; 28 succs { 29 }
;; 29 succs { 23 30 }
;; 30 succs { 1 }
;; 31 succs { }
bool isSubsetSum (int * set, int n, int sum)
{
  int j;
  int i;
  int j;
  int i;
  int i;
  int i;
  bool subset[0:D.2888][0:D.2884] [value-expr: *subset.0];
  void * saved_stack.2;
  bool D.2905;
  bool iftmp.1;
  bool[0:D.2888][0:D.2884] * subset.0;
  sizetype D.2892;
  bitsizetype D.2891;
  sizetype D.2890;
  bitsizetype D.2889;
  sizetype D.2888;
  int D.2887;
  sizetype D.2886;
  bitsizetype D.2885;
  sizetype D.2884;
  int D.2883;

  <bb 2> :
  saved_stack.2 = __builtin_stack_save ();
  D.2883 = sum + 1;
  _1 = (ssizetype) D.2883;
  _2 = _1 + -1;
  _3 = (sizetype) _2;
  D.2884 = _3;
  _4 = (sizetype) D.2883;
  _5 = (bitsizetype) _4;
  _6 = _5 * 8;
  D.2885 = _6;
  _7 = (sizetype) D.2883;
  D.2886 = _7;
  D.2887 = n + 1;
  _8 = (ssizetype) D.2887;
  _9 = _8 + -1;
  _10 = (sizetype) _9;
  D.2888 = _10;
  _11 = (sizetype) D.2883;
  _12 = (bitsizetype) _11;
  _13 = (sizetype) D.2887;
  _14 = (bitsizetype) _13;
  _15 = _12 * _14;
  _16 = _15 * 8;
  D.2889 = _16;
  _17 = (sizetype) D.2883;
  _18 = (sizetype) D.2887;
  _19 = _17 * _18;
  D.2890 = _19;
  _20 = (sizetype) D.2883;
  _21 = (bitsizetype) _20;
  _22 = (sizetype) D.2887;
  _23 = (bitsizetype) _22;
  _24 = _21 * _23;
  _25 = _24 * 8;
  D.2891 = _25;
  _26 = (sizetype) D.2883;
  _27 = (sizetype) D.2887;
  _28 = _26 * _27;
  D.2892 = _28;
  subset.0 = __builtin_alloca_with_align (D.2892, 8);
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  (*subset.0)[i]{lb: 0 sz: D.2886}[0] = 1;
  i = i + 1;

  <bb 4> :
  if (i <= n)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  (*subset.0)[0]{lb: 0 sz: D.2886}[i] = 0;
  i = i + 1;

  <bb 7> :
  if (i <= sum)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  i = 1;
  goto <bb 21>; [INV]

  <bb 9> :
  j = 1;
  goto <bb 19>; [INV]

  <bb 10> :
  _29 = (long unsigned int) i;
  _30 = _29 * 4;
  _31 = _30 + 18446744073709551612;
  _32 = set + _31;
  _33 = *_32;
  if (j < _33)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _34 = i + -1;
  _35 = (*subset.0)[_34]{lb: 0 sz: D.2886}[j];
  (*subset.0)[i]{lb: 0 sz: D.2886}[j] = _35;

  <bb 12> :
  _36 = (long unsigned int) i;
  _37 = _36 * 4;
  _38 = _37 + 18446744073709551612;
  _39 = set + _38;
  _40 = *_39;
  if (j >= _40)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 13> :
  _41 = i + -1;
  _42 = (*subset.0)[_41]{lb: 0 sz: D.2886}[j];
  if (_42 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _43 = i + -1;
  _44 = (long unsigned int) i;
  _45 = _44 * 4;
  _46 = _45 + 18446744073709551612;
  _47 = set + _46;
  _48 = *_47;
  _49 = j - _48;
  _50 = (*subset.0)[_43]{lb: 0 sz: D.2886}[_49];
  if (_50 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.1 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.1 = 0;

  <bb 17> :
  (*subset.0)[i]{lb: 0 sz: D.2886}[j] = iftmp.1;

  <bb 18> :
  j = j + 1;

  <bb 19> :
  if (j <= sum)
    goto <bb 10>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  i = i + 1;

  <bb 21> :
  if (i <= n)
    goto <bb 9>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  i = 0;
  goto <bb 29>; [INV]

  <bb 23> :
  j = 0;
  goto <bb 26>; [INV]

  <bb 24> :
  _51 = (*subset.0)[i]{lb: 0 sz: D.2886}[j];
  _52 = (int) _51;
  printf ("%4d", _52);

  <bb 25> :
  j = j + 1;

  <bb 26> :
  if (j <= sum)
    goto <bb 24>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  __builtin_putchar (10);

  <bb 28> :
  i = i + 1;

  <bb 29> :
  if (i <= n)
    goto <bb 23>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 30> :
  D.2905 = (*subset.0)[n]{lb: 0 sz: D.2886}[sum];
  __builtin_stack_restore (saved_stack.2);
  return D.2905;

  <bb 31> :
<L30>:
  __builtin_stack_restore (saved_stack.2);
  resx 1

}



;; Function main (main, funcdef_no=13, decl_uid=2878, cgraph_uid=14, symbol_order=13)

Removing basic block 9
Removing basic block 5
Merging blocks 7 and 8
Merging blocks 7 and 10
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 7 3 }
;; 3 succs { 4 5 }
;; 4 succs { 7 6 }
;; 5 succs { 7 6 }
;; 6 succs { 1 }
;; 7 succs { }
int main ()
{
  bool D.2917;
  int n;
  int sum;
  int set[6];
  int D.2915;
  bool retval.3;

  <bb 2> :
  set[0] = 3;
  set[1] = 34;
  set[2] = 4;
  set[3] = 12;
  set[4] = 5;
  set[5] = 2;
  sum = 9;
  n = 6;
  D.2917 = isSubsetSum (&set, n, sum);

  <bb 3> :
  _1 = D.2917;
  _2 = (int) _1;
  retval.3 = _2 == 1;
  if (retval.3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  printf ("Found a subset with given sum");
  goto <bb 6>; [INV]

  <bb 5> :
  printf ("No subset with given sum");

  <bb 6> :
  D.2915 = 0;
  set = {CLOBBER};
  return D.2915;

  <bb 7> :
<L5>:
  set = {CLOBBER};
  resx 1

}


